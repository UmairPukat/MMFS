// <auto-generated />
using System;
using MMFS_Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MMFS_Context.Migrations
{
    [DbContext(typeof(_DbContext))]
    [Migration("20220316045538_update_UserProfile")]
    partial class update_UserProfile
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("MMFS_Context.UserProfile.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("int")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("Date")
                        .HasColumnName("CreatedDateTime");

                    b.Property<bool>("IsActive")
                        .HasMaxLength(50)
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.Property<int?>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("int")
                        .HasColumnName("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("Date")
                        .HasColumnName("UpdatedDateTime");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethod");
                });

            modelBuilder.Entity("MMFS_POCO.AccessingComponent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("int")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("Date")
                        .HasColumnName("CreatedDateTime");

                    b.Property<string>("Icons")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Icons");

                    b.Property<bool>("IsActive")
                        .HasMaxLength(50)
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("URL");

                    b.Property<int?>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("int")
                        .HasColumnName("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("Date")
                        .HasColumnName("UpdatedDateTime");

                    b.HasKey("Id");

                    b.ToTable("AccessingComponents");
                });

            modelBuilder.Entity("MMFS_POCO.Bank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("int")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("Date")
                        .HasColumnName("CreatedDateTime");

                    b.Property<bool>("IsActive")
                        .HasMaxLength(50)
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.Property<int?>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("int")
                        .HasColumnName("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("Date")
                        .HasColumnName("UpdatedDateTime");

                    b.HasKey("Id");

                    b.ToTable("Bank");
                });

            modelBuilder.Entity("MMFS_POCO.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("int")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("Date")
                        .HasColumnName("CreatedDateTime");

                    b.Property<bool>("IsActive")
                        .HasMaxLength(50)
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.Property<int?>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("int")
                        .HasColumnName("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("Date")
                        .HasColumnName("UpdatedDateTime");

                    b.HasKey("Id");

                    b.ToTable("City");
                });

            modelBuilder.Entity("MMFS_POCO.FirstTimeLogin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<int>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("int")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("Date")
                        .HasColumnName("CreatedDateTime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Email");

                    b.Property<bool>("IsActive")
                        .HasMaxLength(50)
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<int?>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("int")
                        .HasColumnName("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("Date")
                        .HasColumnName("UpdatedDateTime");

                    b.HasKey("Id");

                    b.ToTable("FirstTimeLogin");
                });

            modelBuilder.Entity("MMFS_POCO.Permission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<int>("AccessingCompId")
                        .HasColumnType("int");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Status")
                        .HasMaxLength(10)
                        .HasColumnType("bit")
                        .HasColumnName("Status");

                    b.HasKey("Id");

                    b.HasIndex("AccessingCompId");

                    b.HasIndex("RoleId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("MMFS_POCO.Race", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("int")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("Date")
                        .HasColumnName("CreatedDateTime");

                    b.Property<bool>("IsActive")
                        .HasMaxLength(50)
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.Property<int?>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("int")
                        .HasColumnName("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("Date")
                        .HasColumnName("UpdatedDateTime");

                    b.HasKey("Id");

                    b.ToTable("Race");
                });

            modelBuilder.Entity("MMFS_POCO.Religion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("int")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("Date")
                        .HasColumnName("CreatedDateTime");

                    b.Property<bool>("IsActive")
                        .HasMaxLength(50)
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.Property<int?>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("int")
                        .HasColumnName("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("Date")
                        .HasColumnName("UpdatedDateTime");

                    b.HasKey("Id");

                    b.ToTable("Religions");
                });

            modelBuilder.Entity("MMFS_POCO.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("int")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("Date")
                        .HasColumnName("CreatedDateTime");

                    b.Property<bool>("IsActive")
                        .HasMaxLength(50)
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.Property<int?>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("int")
                        .HasColumnName("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("Date")
                        .HasColumnName("UpdatedDateTime");

                    b.HasKey("Id");

                    b.ToTable("States");
                });

            modelBuilder.Entity("MMFS_POCO.UserManagement.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("MMFS_POCO.UserManagement.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CodeValidDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("VarificationCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("MMFS_POCO.UserProfile.BusinessProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AGPManagerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("AGPManagerName");

                    b.Property<string>("AGPManagerPhoneNo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("AGPManagerPhoneNo");

                    b.Property<string>("BankAccountNo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("BankAccountNo");

                    b.Property<int?>("BankId")
                        .HasColumnType("int");

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BusinessAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("BusinessAddress");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("Company");

                    b.Property<string>("EnterpriseSSMNo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("EnterpriseSSMNo");

                    b.Property<string>("HomeFurnishing")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("HomeFurnishing");

                    b.Property<string>("HouseType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("HouseType");

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Postcode");

                    b.Property<DateTime>("SSMExpiryDate")
                        .HasColumnType("Date")
                        .HasColumnName("SSMExpiryDate");

                    b.Property<string>("ShopLot")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("ShopLot");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("CityId");

                    b.HasIndex("StateId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("UserBusinessProfile");
                });

            modelBuilder.Entity("MMFS_POCO.UserProfile.PersonalProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AGPIdCard")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("AGPIdCard");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyHouseAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("CompanyHouseAddress");

                    b.Property<string>("CompanyVehicleModel")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CompanyVehicleModel");

                    b.Property<string>("CompanyVehiclePlateNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CompanyVehiclePlateNo");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("Date")
                        .HasColumnName("DOB");

                    b.Property<string>("DrivingLicenseClass")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("DrivingLicenseClass");

                    b.Property<string>("DrivingLicenseType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("DrivingLicenseType");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Gender");

                    b.Property<DateTime>("JoiningDate")
                        .HasColumnType("Date")
                        .HasColumnName("JoiningDate");

                    b.Property<string>("MobilePhoneNo")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("MobilePhoneNo");

                    b.Property<string>("NewNRICNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("NewNRICNo");

                    b.Property<string>("OldNRICNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("OldNRICNo");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Postcode");

                    b.Property<int>("RaceId")
                        .HasColumnType("int");

                    b.Property<int>("ReligionId")
                        .HasColumnType("int");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Status");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserTypeId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("RaceId");

                    b.HasIndex("ReligionId");

                    b.HasIndex("StateId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("UserPersonalProfile");
                });

            modelBuilder.Entity("MMFS_POCO.UserProfile.UserChequeProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("HouseFurnishingAmount")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("HouseFurnishingAmount");

                    b.Property<string>("HouseFurnishingPaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("HouseFurnishingPaymentMethod");

                    b.Property<string>("HouseFurnishingRemark")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("HouseFurnishingRemark");

                    b.Property<string>("HouseUtilitiesAmount")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("HouseUtilitiesAmount");

                    b.Property<string>("HouseUtilitiesPaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("HouseUtilitiesPaymentMethod");

                    b.Property<string>("HouseUtilitiesRemark")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("HouseUtilitiesRemark");

                    b.Property<string>("JVAgreementAmount")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("JVAgreementAmount");

                    b.Property<string>("JVAgreementPaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("JVAgreementPaymentMethod");

                    b.Property<string>("JVAgreementRemark")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("JVAgreementRemark");

                    b.Property<string>("OperationReserveAmount")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("OperationReserveAmount");

                    b.Property<string>("OperationReservePaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("OperationReservePaymentMethod");

                    b.Property<string>("OperationReserveRemark")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("OperationReserveRemark");

                    b.Property<string>("PloteAmount")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("PloteAmount");

                    b.Property<string>("PlotePaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("PlotePaymentMethod");

                    b.Property<string>("PloteRemark")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("PloteRemark");

                    b.Property<string>("ShopLotAmount")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ShopLotAmount");

                    b.Property<string>("ShopLotPaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ShopLotPaymentMethod");

                    b.Property<string>("ShopLotRemark")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("ShopLotRemark");

                    b.Property<string>("StampingAmount")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("StampingAmount");

                    b.Property<string>("StampingPaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("StampingPaymentMethod");

                    b.Property<string>("StampingRemark")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("StampingRemark");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("UserChequeProfile");
                });

            modelBuilder.Entity("MMFS_POCO.UserProfile.UserEmergencyProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("ContactName");

                    b.Property<string>("ContactNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ContactNo");

                    b.Property<string>("Relationship")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Relationship");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Vaccination")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("Covid19Vaccination");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("UserEmergencyProfile");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MMFS_POCO.Permission", b =>
                {
                    b.HasOne("MMFS_POCO.AccessingComponent", "AccessingComponent")
                        .WithMany("Permission")
                        .HasForeignKey("AccessingCompId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MMFS_POCO.UserManagement.ApplicationRole", "ApplicationRole")
                        .WithMany("Permission")
                        .HasForeignKey("RoleId");

                    b.Navigation("AccessingComponent");

                    b.Navigation("ApplicationRole");
                });

            modelBuilder.Entity("MMFS_POCO.UserProfile.BusinessProfile", b =>
                {
                    b.HasOne("MMFS_POCO.Bank", null)
                        .WithMany("BusinessProfile")
                        .HasForeignKey("BankId");

                    b.HasOne("MMFS_POCO.City", "City")
                        .WithMany("BusinessProfile")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MMFS_POCO.State", "State")
                        .WithMany("BusinessProfile")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MMFS_POCO.UserManagement.ApplicationUser", "ApplicationUser")
                        .WithOne("BusinessProfile")
                        .HasForeignKey("MMFS_POCO.UserProfile.BusinessProfile", "UserId");

                    b.Navigation("ApplicationUser");

                    b.Navigation("City");

                    b.Navigation("State");
                });

            modelBuilder.Entity("MMFS_POCO.UserProfile.PersonalProfile", b =>
                {
                    b.HasOne("MMFS_POCO.City", "City")
                        .WithMany("PersonalProfile")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MMFS_POCO.Race", "Race")
                        .WithMany("PersonalProfile")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MMFS_POCO.Religion", "Religion")
                        .WithMany("PersonalProfile")
                        .HasForeignKey("ReligionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MMFS_POCO.State", "State")
                        .WithMany("PersonalProfile")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MMFS_POCO.UserManagement.ApplicationUser", "ApplicationUser")
                        .WithOne("PersonalProfile")
                        .HasForeignKey("MMFS_POCO.UserProfile.PersonalProfile", "UserId");

                    b.Navigation("ApplicationUser");

                    b.Navigation("City");

                    b.Navigation("Race");

                    b.Navigation("Religion");

                    b.Navigation("State");
                });

            modelBuilder.Entity("MMFS_POCO.UserProfile.UserChequeProfile", b =>
                {
                    b.HasOne("MMFS_POCO.UserManagement.ApplicationUser", "ApplicationUser")
                        .WithOne("UserChequeProfile")
                        .HasForeignKey("MMFS_POCO.UserProfile.UserChequeProfile", "UserId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("MMFS_POCO.UserProfile.UserEmergencyProfile", b =>
                {
                    b.HasOne("MMFS_POCO.UserManagement.ApplicationUser", "ApplicationUser")
                        .WithOne("UserEmergencyProfile")
                        .HasForeignKey("MMFS_POCO.UserProfile.UserEmergencyProfile", "UserId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("MMFS_POCO.UserManagement.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MMFS_POCO.UserManagement.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MMFS_POCO.UserManagement.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("MMFS_POCO.UserManagement.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MMFS_POCO.UserManagement.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MMFS_POCO.UserManagement.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MMFS_POCO.AccessingComponent", b =>
                {
                    b.Navigation("Permission");
                });

            modelBuilder.Entity("MMFS_POCO.Bank", b =>
                {
                    b.Navigation("BusinessProfile");
                });

            modelBuilder.Entity("MMFS_POCO.City", b =>
                {
                    b.Navigation("BusinessProfile");

                    b.Navigation("PersonalProfile");
                });

            modelBuilder.Entity("MMFS_POCO.Race", b =>
                {
                    b.Navigation("PersonalProfile");
                });

            modelBuilder.Entity("MMFS_POCO.Religion", b =>
                {
                    b.Navigation("PersonalProfile");
                });

            modelBuilder.Entity("MMFS_POCO.State", b =>
                {
                    b.Navigation("BusinessProfile");

                    b.Navigation("PersonalProfile");
                });

            modelBuilder.Entity("MMFS_POCO.UserManagement.ApplicationRole", b =>
                {
                    b.Navigation("Permission");
                });

            modelBuilder.Entity("MMFS_POCO.UserManagement.ApplicationUser", b =>
                {
                    b.Navigation("BusinessProfile");

                    b.Navigation("PersonalProfile");

                    b.Navigation("UserChequeProfile");

                    b.Navigation("UserEmergencyProfile");
                });
#pragma warning restore 612, 618
        }
    }
}
